# Getting around USB executable blocks
### A certain school in a certain town knows this all too well...

A while ago, I found a way to get around USB blocks that work via popular classroom management software. Sometimes, schools employ specialisd software suites that serve to monitor and 'protect' school ICT equipment, the catch is that it's very strict and is simply invasive to say the least.
 One such solution that pretty much rules the roost when it comes to system affordability and usability is AB Tutor by Globe Microsystems (AB Consulting). To give you an idea of
 why I personally hate this piece of software, here are some examples of the evil it commits:
 
 - Allows moderators to remotely view your screen at any time, for any reason.
 - Allows moderators to set policies, block apps and kick you out of apps.
 - Allows moderators to 'lock' your screen via the Win32 API on Windows, Guided Access on iOS (it needs a separate app), and some obscure framework on macOS.

On a side-note, how does it do this? Simple. It shows a fullscreen window via [Qt](https://www.qt.io/), then it disables all known shortcuts to stop the user from trying to escape the form. Some shortcuts include:
- *Any* press of the Windows key that can be handled; e.g. Win+L (lock the current session).
- Ctrl+Alt+Del (WinLogon Service Menu)
- Ctrl-Shift-Esc (Task Manager)
- Alt+F4 (exit the open app)
- Alt+Tab (Window Manager)

 Contrary to popular belief, AB Tutor doesn't kill *all* inputs. My tests show that Windows security doesn't allow complete lockdown of input...so your inputs are still active because of
 Ring 0 isolation, but they've just hooked all inputs that might cause trouble.
